首先要先安装nodejs
安装完后：node -v  查看版本是否安装成功
我们主要是使用npm(包管理工具，类似于java后台语言的maven)

npm init  :初始化项目
	index.js：项目的入口文件
npm init -y:不提示，直接使用默认的package.json结构

npm root -g：查看全局目录
npm install 模块名 -g：将模块安装到全局模块
npm config set prefix 目录地址：修改默认全局安装目录

npm install 模块名 -D/--save-dev  ：安装开发环境模块
npm install 模块名 -S/--save  ：安装生产环境模块

npm install 下载项目中(package.json中dependences)的所有相关依赖，
			在下载新项目是不存在node_modules文件的，
			该文件包含项目所有相关依赖

npm uninstall 模块名：卸载模块

配置淘宝镜像加速：
npm get registry :查看当前镜像
npm config set registry https://registry.npm.taobao.org1：设置镜像

vue：
应用场景：
	针对单页面应用（SPA）
	
vue与jquery的区别：
	vue:声明式开发，不需要直接操作dom
	jquery:命令式开发，需要手动操作dom才能实现对应功能
	

第二章学习总结：
01：hello(双向数据绑定案例):
		{{}}：用于标签体内显示数据
		v-model:进行数据的双向绑定
02：vue指令：
		v-once:一次性插值
		v-html:输出真正的html内容，可烦XSS攻击
模板数据绑定：
		v-bind:用于绑定属性，缩写为：
		v-on:用于绑定事件处理函数，缩写为@
03：计算属性和监听器：
		计算属性与函数的区别：
			函数：
				1.每次调用都会执行
				2.只有单向绑定
			computed：
				1.调用后数据改变才会执行
				2.默认为单向绑定，提供set方法可以进行双向绑定，
				  属性更新后可以操作更新后的值。
		监听器：绑定监听的值，该值发生变化后会触发回调函数，
				回调函数的第一个参数是更新后的值
04：Class与Style:
		Class的数据绑定有三种形式：
			1.字符串表达式。
			2.对象表达式。
			3.数组表达式。
		Style的数据绑定形式一般使用对象表达式
05：条件渲染：
		v-if、v-else、v-show
		v-if与v-show的区别：
			v-if:根据条件为true，每次生成Dom,
				 性能开销大，切换显示不频繁的场合下使用
			v-show:根据条件为true,每次改变css的display,
				 性能开销小，切换频繁的场合下使用
06：列表渲染：
		1.v-for迭代数组或对象
		2.in和of的用法一样
		3.Vue根据key属性的变化重新排列元素的顺序，
		并且会移除key不存在的元素
07：事件处理：
		v-on或缩写为@
	事件修饰符：
		prevent:阻止事件的默认行为
		stop:阻止事件冒泡
		once:限制事件只能执行一次
	按键码：
		13:回车键
08：表单数据双向绑定：
		利用时间修饰符阻止事件的默认行为，表单数据双向绑定到自定义函数中处理
		
		
		
第三章学习总结：
01：过度效果：
	xxx-enter-active和xxx.leave-active:
		设置元素显示或隐藏的过渡效果
02：动画效果：
	在xxx-enter-active和xxx.leave-active的过程中设置@keyframes
03: Vue内置指令：
	v-pre：在{{}}中显示字符串
	v-text:解决{{}}闪烁问题(作用于单个标签中)
	v-cloak:解决{{}}闪烁问题(作用于管理入口的标签中)
04：自定义指令：
	注册全局的自定义指令(可在所有Vue实例管理入口下引用这个指令)
	注册局部的自定义指令(只能在当前Vue实例管理的入口下引用这个指令)
	
	
第四章学习总结：
添加任务：
	获取输入框内容，去空格后，判断是否有长度，没有的话不做任何事
显示所有未完成任务数：
	使用计算属性，过滤items中所有completed为false的总数
切换所有任务状态：
	使用计算属性，给toggleAll属性添加set方法，拿到更新后的状态，
		然后遍历数组给所有completed赋更新后的状态
移除任务项：
	使用数组的splice(index,1)方法移除指定对象
清除所有未完成任务功能：
	遍历所有completed为false的对象，赋值给当前数组
编辑任务项：
	进入编辑状态后，输入框显示元内容
		:value="item.content"
	输入框绑定Esc按键事件，移除editing样式
	输入框绑定Enter按键事件，添加blur失去焦点事件
	前几个事件的前提是得有聚焦才能触发则几个事件：
		自定义指令：
			全局：用于添加任务输入框
			局部：用于编辑任务输入框
路由状态切换：
	使用onhaschange事件拿到切换后的hash值，赋给filterStatus,然后用switch判断这个过滤状态
		根据不用的hash过滤不同的数据
数据持久化：
	声明itemStorage对象添加get,set(items),set的参数在watch中根据items的改变更新本地数据


第五章学习总结：
过滤器：
	定义局部过滤器，
		参数是{{content|contentFilter}}"|"左边的那个值
自定义插件：
	插件为Vue添加全局功能，一般是添加全局方法/全局指令/过滤器等
	Vue插件有一个公开方法install,通过install方法给Vue添加全局功能
	通过全局方法 Vue.use()使用插件，它需要在你调用 new Vue()启动应用之前完成


第六章学习总结：
组件的概念：
	组件可以理解为 就是特殊的Vue实例，可复用，不需要手动实例化而已,组件的data选项必须是一个函数
	命名方式推荐横线分隔符
	定义全局组件：
		全局注册之后，可以在任何新创建的Vue实例(new  Vue)的模板中使用
		Vue.component(组件名,Vue实例对象);
	定义局部组件：
		一般把一些非通用部分注册为局部组件
		Vue实例中使用components:{组件名：引用的组件对象}
组件化注意事项：
	组件可以理解为特殊的Vue实例，不需要手动实例化，管理自己的template模板
	组件的template必须有 且只有一个根节点
	组件的data选项必须是一个函数，且函数返回一个对象
	组件与组件之间是相互独立的，可以配置自己的一些选项资源data、methods、computed等
	思想：
		组件自己管理自己，不影响别的组件
组件间通信：
	组件间通信方式：
		props--单向数据流  用于父组件向子组件传递数据
		$emit--自定义事件  用于在子组件中触发父组件的监听事件函数调用
		slot--插槽分发内容 用于父组件向子组件传递 标签+数据  
	组件间通信规则：
		不要在子组件中直接修改父组件传递的数据
		数据初始化时，应当看初始化的数据是否用于多个组件中，如果需要被用于多个组件中，
		  则初始化在父组件中；如果只在一个组件中使用，那就初始化在这个要使用的组件中。
		数据初始化在哪个组件，更细数据的方法(函数)就应该定义在哪个组件
	
	
第七章学习总结：
Vue实例生命周期：
	生命周期钩子函数：
		生命周期分为三大阶段：
			初始化阶段的钩子函数:
				beforeCreate()实例创建前:数据和模板均未获取到
				created()实例创建后:最早可访问到data数据，但模板未获取到
				beforeMount()数据挂载前:模板已获取到，但是数据未挂载到模板上
				mounted()数据挂载后:数据已挂载到模板中
			更新阶段的钩子函数:
				beforeUpdate()模板更新前:data改变后，更新数据模板前调用
				updated()模板更新后:将data渲染到数据模板中
			销毁阶段的钩子函数：
				beforeDestory()实例销毁前
				destoryed()实例销毁后
Vue中常用的ajax库
	在vue1.x版本中，被广泛使用的非官方Vue插件 vue-resource
	在vue2+版本中，官方推荐使用非常棒的第三方ajax请求库(axios)


第八章学习总结：
路由的介绍：
	Vue Router是Vue.js官方的路由管理器
路由的基本使用(和步骤)：
	1.首先要安装vue-router：npm install vue-router
	2.定义组件
	3.配置路由表:当点击特定的url时，显示对应的那个组件
	4.将路由表的实例注入到实例中
	<router-link>:
		to:指定跳转的路由
		tag:默认渲染后生成<a>标签，使用此属性可指定其他标签
		active-class:默认渲染后CSS类名为"router-link-active"，使用此属性可指定渲染后生成其他类名
			可以通过路由的构造选项linkActiveClass来全局配置，就不用再每个<router-link>
			使用active-class来指定生成的类名
		exact:默认情况下路由是模糊匹配，使用此属性可修改为精确匹配
	<router-view>:配置路由渲染组件出口
嵌套路由：
	在某个路由中使用children(配置一个数组)属性
配置默认选中：
	{path:"",redirect:"默认的路由"}
缓存路由组件：
	场景与作用：
		默认情况下，当路由组件被切换后 组件实例会被销毁，当切换回来时实例又会重新创建
		如果可以缓存路由组件实例，切换后不用重新加载数据，可以提高用户体验
		<keep-alive>
			<router-view></router-view>	
		</keep-alive>
路由组件传递数据(步骤)：
	1.路由表中配置需要传递参数那个路由(在后面跟:参数名)是一个路径变量占位符
	2.路由跳转路径to属性前加:绑定to属性为动态属性，使用反引号在路由后面拼接参数名
	3.在路由组件中读取参数this.$route.params.参数名(默认是字符串，-0可转为数值类型)
编程式路由导航：
	声明式导航:
		在页面中使用a标签的href指定跳转路径
	编程式导航：
		在代码中使用$router的跳转方式(push,replace,bak().go(?)等)
	push与replace的区别：
		push:添加路由，跳转后点击后退可以回到当前页面
		replace:替换路由，跳转后点击后退回到最初的那个页面