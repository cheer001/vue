第一章学习总结(Webpack介绍):
Webpack的介绍：
	Webpack是一个前端的静态模块资源打包工具，能让浏览器也支持模块化。
	 它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的
	 规则生成对应的静态资源
Webpack的作用：
	Webpack核心主要进行JavaScript资源打包
	结合其他插件工具，将多种静态资源css、png、sass分类转换成一个个
	 静态文件，这样可以减少页面的请求
	可集成babel工具实现ECMAScript6转ECMAScript5，解决兼容性问题
	可集成http服务器
	可集成模块热加载，当代码改变后自动刷新浏览器等等功能
	
	
第二章学习总结(Webpack安装)：
全局安装：
	可通过 npm root -g 查看全局安装目录
	npm i -g webpack@v4.35.2 npm i -g webpack-cli@3.3.6  :直接全部安装
	npm i -g webpack@v4.35.2 :安装webpack指定版本
	npm i -g webpack-cli@3.3.6  :安装webpack-cli才能使用命令行
配置环境变量--->path：
	E:\workspace\VUEProject\Global(有webpack.cmd文件的路径)
VSCode 中安装插件 Node Snippets ,有代码快捷提示 
总结全局安装：
	不推荐全局安装webpack.在两台电脑使用同一个项目时可能造成webpack项目的版本
	 不一致，导致无法打包
本地安装(推荐)：
	解决上述问题，将webpack项目安装到对应项目中，另一台电脑使用该项目时版本一致
卸载全局webpack和webpack-cli:
	npm un -g webpack   等同于   npm uninstall --global webpack
	npm un -g webpack-cli   等同于   npm uninstall --global webpack-cli
安装本地webpack和webpack-cli:
	npm i -D webpack	等同于   npm install --save-dev webpack
	npm i -D webpack-cli	等同于   npm install --save-dev webpack-cli
解决使用webpack命令打包报错：
	在本地安装的webpack，要通过在项目文件下package.json文件中的scripts配置命令映射
	 "scripts": {    
		"show": "webpack -v",   
		"start": "node ./src/main.js"，    
		"build": "webpack"  
	  },
	 通过使用：npm run 命令别名 执行对应命令(start命令别名的话前面不用加run)


第三章学习总结(ECMAScript6模块规范)：
导出模块export(等价于module.exports)
导入模块import(等价于require)
导出默认成员：
	默认成员只能有一个，不然会报错
导出非默认成员:
	非默认成员必须要有成员名称
	按需导入指定成员，采用结构赋值的方式
	一次性导入模块文件中的所有成员(包含default)
	
	
第四章学习总结(打包CSS/Images等资源):
由于Webpack本身只能处理JavaScript模块，如果要处理其他类型的文件，就需要结合插件来使用，
 这些插件在Webpack中被称为Loder(加载器)来进行转换
Loder可以理解为是模块和资源的转换器，它本身是一个函数，参数接受的是源文件，
 返回值是转换后的结果
这样我们就可以通过require或import来加载任何类型的模块文件，比如CSS、图片
打包CSS资源(步骤)：
	1.安装style-loader和css-loader依赖
		npm install --save-dev style-loader css-loader
		首先安装Loader插件：
			css-loader是将css装载到javascript;
			style-loader是让javascript认识css
	2.修改webpack.config.js
		module: { // 模块
		       rules: [ // 规则
		           {
		               test: /\.css$/, // 正则表达式，匹配 .css 文件资源
		               use: [  // 使用的 Loader ,注意顺序不能错
		                   'style-loader',
		                   'css-loader'
		               ]
		           }
		       ]
		   }
打包Images资源(步骤)：
	1.安装file-loader依赖
		install --save-dev file-loader
	2.修改webpack.config.js
		module: { // 模块
		       rules: [ // 规则
		           //...
					 {
					   	test: /\.(png|svg|jpg|gif)$/,
					    use: [
					    'file-loader'
					 }
				]
	问题：
		如果直接访问根目录下的 index.html ,那么图片资源路径就无法访问到。
	解决方案：
		把index.html放到dist目录中。
	但是dist是打包编译的结果，而非源码，所以把index.html放到dist就不合适，
	 而且如果bundle.js文件名有变动的话，index.html文件也得跟着改
	综合以上问题，可以使用一个插件：Html-webpack-plugin来解决。
使用HtmlWebpackPlugin插件(步骤):
	作用：解决文件路径问题
		将index.html打包到bundle.js所在目录中
		同时也会在index.html中自动的使用<script>引入bundle.js
	1.安装插件
		npm install --save-dev html-webpack-plugin
	2.修改 webpack.conﬁg.js
		// 配置插件
		   plugins: [
		       new HtmlWebpackPlugin({
		           // 此插件作用是将 index.html 打包到 bundle.js 所在目录中,
		           // 同时也会在 index.html 中自动的 <script> 引入 bundle.js
		           // 注意：其中的文件名 bundle 取决于上面output.filename中指定的名称
		           template: './index.html'
		       })
		   ],



第五章学习总结(实时重新加载):
前面遇到的问题：
	每一次手动打包很麻烦，打包后还需要手动刷新浏览器
解决方案:
	采用webpack提供的工具：webpack-dev-server，它允许在项目运行时更新所有类型的模块后，
	 而无需手动打包和刷新页面，它会自动打包和刷新页面
实操：
	1.安装依赖：
		npm install --save-dev webpack-dev-server
	2.修改 webpack.config.js 配置
	 	// 实时重新加载
	   devServer: {
	       contentBase: './dist'
	   },
	3.修改 package.json 的 scripts 
		--open选项打包成功后，自动打开浏览器
		"dev": "webpack-dev-server --open" 
		
		
第六章学习总结(Babel 浏览器兼容性):
遇到的问题：
	找IE7中不能识别ES5代码的问题
解决方案：
	使用babel插件，将ES6代码转换为ES5代码
实操：
	1.安装babel
		npm install -D babel-loader @babel/core @babel/preset-env1
	2.配置 webapck.conﬁg.js 
		module: {
			rules: [
			  //...
			  //解决兼容性问题
			  {
				test: /\.m?js$/,
				exclude: /(node_modules)/, //排除的目录
				use: {
				  loader: "babel-loader",
				  options: {
					presets: ["@babel/preset-env"], //babel中内置的转换规则工具
				  },
				},



第七章学习总结(Vue-Loader 打包Vue单文件组件):
打包Vue 基本配置(步骤)：
	1.安装vue-loader和vue-template-compiler
		npm install -D vue-loader vue-template-compiler
		这里如果遇到Vue packages version mismatch问题
			解决方案:(将vue-template-compiler模块与vue的版本保持一致)
				npm un vue-template-compiler
				npm i -D vue-template-compiler@2.6.10
	2.修改 webpack.config.js 配置	
		module: {
			rules: [
				// ... 其它规则
				{
					test: /\.vue$/,
					loader: 'vue-loader'
				}
			]
		},
		plugins: [
			// 请确保引入这个插件！
			new VueLoaderPlugin()
		]
webpack与 Vue 单文件组件案例：
	警告问题：
		默认引入的是运行版的vue.js，没有编译功能，所以会发出警告
	解决警告问题的三种解决方案：
		一：手动的引入指定的版本，引入完整版
			import Vue from "vue/dist/vue";
		二：采用webpack配置完整版vue.js
			//解析完整版 vue.js
		   resolve: {
			 alias: {
			   vue$: "vue/dist/vue.js",
			 },
		   },
		三(推荐):使用 render 函数来渲染组件
			new Vue({
			  render: (h) => h(App), //ES6箭头函数
			}).$mount("#app");
.vue 单文件组件完整版：
	在 <script> 导出一个默认成员对象，就是当前组件对象，Vue的 data/methods等选项直接定义在此对象中
	在 <style> 上使用 scoped 属性，CSS 样式只在当前组件有效，否则样式会自动作用到父子组件中。
模块热替换（HMR）：
	模块热替换(hot module replacement 或 HMR)是 webpack 提供的最有用的功能之一。
	模块热替换无需完全刷新页面，局部无刷新的情况下就可以更新。
	配置(步骤):
		首先确保有安装：npm install --save-dev webpack-dev-server
		1.导入webpack插件
			const webpack = require('webpack');
		2.开启模块热加载
			devServer: {
				hot: true,
			},
		3.配置模块热替换
			new webpack.HotModuleReplacementPlugin(),